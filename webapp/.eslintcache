[{"/Users/jia/IdeaProjects/Torn/webapp/src/index.js":"1","/Users/jia/IdeaProjects/Torn/webapp/src/App.js":"2","/Users/jia/IdeaProjects/Torn/webapp/src/reportWebVitals.js":"3","/Users/jia/IdeaProjects/Torn/webapp/src/components/pages/Navbar.js":"4","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/Datepicker.js":"5","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/contributions/FactionContributions.js":"6","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/organisedcrimes/OrganisedCrimes.js":"7","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/organisedcrimes/OrganisedCrimesSummary.js":"8","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/contributions/FactionContributionsSummary.js":"9","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/contributions/FactionContributionsGraph.js":"10","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/organisedcrimes/MembersSuggest.js":"11","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/organisedcrimes/OrganisedCrimeDrillDown.js":"12"},{"size":500,"mtime":1608998961419,"results":"13","hashOfConfig":"14"},{"size":878,"mtime":1609442724095,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1608998961420,"results":"16","hashOfConfig":"14"},{"size":1973,"mtime":1609442798926,"results":"17","hashOfConfig":"14"},{"size":1694,"mtime":1609374388961,"results":"18","hashOfConfig":"14"},{"size":327,"mtime":1609442724092,"results":"19","hashOfConfig":"14"},{"size":302,"mtime":1609442724086,"results":"20","hashOfConfig":"14"},{"size":8520,"mtime":1609599959204,"results":"21","hashOfConfig":"14"},{"size":13250,"mtime":1609454184830,"results":"22","hashOfConfig":"14"},{"size":4799,"mtime":1609118619588,"results":"23","hashOfConfig":"14"},{"size":2190,"mtime":1609601376544,"results":"24","hashOfConfig":"14"},{"size":4650,"mtime":1609606244081,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1p7q39f",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/jia/IdeaProjects/Torn/webapp/src/index.js",[],["56","57"],"/Users/jia/IdeaProjects/Torn/webapp/src/App.js",[],"/Users/jia/IdeaProjects/Torn/webapp/src/reportWebVitals.js",[],"/Users/jia/IdeaProjects/Torn/webapp/src/components/pages/Navbar.js",["58"],"import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {SiTransportforlondon} from \"react-icons/all\";\nimport {FaBars, FaTimes} from \"react-icons/fa\";\nimport './Navbar.css';\n\nfunction Navbar() {\n    const [click, setClick] = useState(false);\n    const [button, setButton] = useState(true);\n\n    const handleMenuClick = () => setClick(!click);\n    const closeMobileMenu = () => setClick(false);\n\n    const showMenu = () => {\n        if(window.innerWidth <= 900) {\n            setButton(false);\n        } else {\n            setButton(true);\n        }\n    };\n\n    window.addEventListener('resize', showMenu);\n\n    return (\n        <>\n            <div className=\"navbar\">\n                <div className=\"navbar-container container\">\n                    <Link to=\"/\" className=\"navbar-logo\" onClick={closeMobileMenu}>\n                        <SiTransportforlondon className=\"navbar-icon\"/>\n                        LONDON\n                    </Link>\n                    <div className=\"menu-icon\" onClick={handleMenuClick}>\n                        {click ? <FaTimes/> : <FaBars/>}\n                    </div>\n                    <ul className={click? 'nav-menu active' : 'nav-menu'}>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-links\" to=\"/\">\n                                HOME\n                            </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-links\" to=\"/oc\">\n                                OC\n                            </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-links\" href=\"/logout\">\n                                LOGOUT\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Navbar;","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/Datepicker.js",[],"/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/contributions/FactionContributions.js",[],"/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/organisedcrimes/OrganisedCrimes.js",[],"/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/organisedcrimes/OrganisedCrimesSummary.js",["59","60","61"],"import React, {useEffect, useState} from 'react';\nimport CustomDatePicker from \"../Datepicker\";\nimport {Paper} from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Box from \"@material-ui/core/Box\";\nimport './OrganisedCrimesSummary.css';\nimport MembersSuggest from \"./MembersSuggest\";\nimport OrganisedCrimeDrillDown from \"./OrganisedCrimeDrillDown\";\n\n\nconst header = [\n    {id: 'crime', numeric: false, label: 'Crime'},\n    {id: 'success', numeric: true, label: 'Success'},\n    {id: 'attempts', numeric: true, label: 'Attempts'},\n    {id: 'successrate', numeric: true, label: 'Success Rate'},\n    {id: 'profit', numeric: true, label: 'Total Profit'},\n    {id: 'profitAvg', numeric: true, label: 'Average Profit'},\n    {id: 'respect', numeric: true, label: 'Total Respect'},\n    {id: 'respectAvg', numeric: true, label: 'Average Respect'},\n];\n\nfunction Row(props) {\n    const {row} = props;\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <>\n            <TableRow key={row.name + \"-row\"}>\n                <TableCell scope=\"row\" key={row.userId + \"-showmore\"}>\n                    <IconButton aria-label=\"expand row\" size=\"small\"\n                                onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\n                    </IconButton>\n                </TableCell>\n                <TableCell scope=\"row\" key={row.name}>\n                    {row.name}\n                </TableCell>\n                <TableCell align=\"right\" scope=\"row\" key={row.name + \"-success\"}>\n                    {row.successes}\n                </TableCell>\n                <TableCell align=\"right\" scope=\"row\" key={row.name + \"-attempts\"}>\n                    {row.attempts}\n                </TableCell>\n                <TableCell align=\"right\" scope=\"row\" key={row.name + \"-success-rate\"}>\n                    {row.attempts > 0 ? Math.round(row.successes / row.attempts * 100) + '%' : 'N/A'}\n                </TableCell>\n                <TableCell align=\"right\" scope=\"row\" key={row.name + \"-profit\"}>\n                    {row.attempts > 0 ? new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'})\n                        .format(row.profit)\n                        .replace(/\\D00(?=\\D*$)/, '') : 'N/A'}\n                </TableCell>\n                <TableCell align=\"right\" scope=\"row\" key={row.name + \"-profit-avg\"}>\n                    {row.successes > 0 ? new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'})\n                        .format(Math.round(row.profit / row.successes))\n                        .replace(/\\D00(?=\\D*$)/, '') : 'N/A'}\n                </TableCell>\n                <TableCell align=\"right\" scope=\"row\" key={row.name + \"-respect\"}>\n                    {row.attempts > 0 ? row.respect : 'N/A'}\n                </TableCell>\n                <TableCell align=\"right\" scope=\"row\" key={row.name + \"-respect-avg\"}>\n                    {row.successes > 0 ? (row.respect / row.successes).toFixed(1) : 'N/A'}\n                </TableCell>\n            </TableRow>\n            {!open ? <></> : (\n                <TableRow key={row.name + \"-breakdown\"}>\n                    <TableCell colSpan=\"9\">\n                        <Collapse in={open} timeout='auto' unmountOnExit>\n                            <Box margin={1}>\n                                <OrganisedCrimeDrillDown history={row.history}/>\n                            </Box>\n                        </Collapse>\n                    </TableCell>\n                </TableRow>\n            )}\n        </>\n    );\n}\n\nfunction OrganisedCrimesSummary() {\n    const [selectedStartDate, setSelectedStartDate] = useState(null);\n    const [minStartDate, setMinStartDate] = useState(new Date());\n    const [selectedEndDate, setSelectedEndDate] = useState(new Date());\n    const [summaryData, setSummaryData] = useState([]);\n    const [search, setSearch] = useState();\n\n    useEffect(() => {\n        loadTime();\n    }, []);\n\n    useEffect(() => {\n        loadSummaryData();\n    }, [selectedStartDate]);\n\n    useEffect(() => {\n        loadSummaryData();\n    }, [selectedEndDate]);\n\n    useEffect(() => {\n        loadSummaryData();\n    }, [search]);\n\n    const loadTime = () => {\n        fetch(\"api/faction/ocs/startDate\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setSelectedStartDate(new Date(result));\n                    setMinStartDate(new Date(result));\n                },\n                (error) => {\n                    setSelectedStartDate(new Date());\n                    setMinStartDate(new Date());\n                }\n            )\n    };\n\n    const loadSummaryData = () => {\n        if (selectedEndDate == null || selectedStartDate == null) {\n            return;\n        }\n\n        if (search == null || search.replace( /^\\D+/g, '') === \"\") {\n            fetch(`api/faction/ocs/summary/${selectedStartDate.toISOString().slice(0, 16)}/${selectedEndDate.toISOString().slice(0, 16)}`)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result !== null && result.stats !== null) {\n                            setSummaryData(Object.values(result.stats));\n                        }\n                    },\n                    (error) => {\n                        setSummaryData([]);\n                    }\n                )\n        } else {\n            fetch(`api/faction/ocs/summary/${search.replace( /^\\D+/g, '')}/${selectedStartDate.toISOString().slice(0, 16)}/${selectedEndDate.toISOString().slice(0, 16)}`)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result !== null && result.stats !== null) {\n                            setSummaryData(Object.values(result.stats));\n                        }\n                    },\n                    (error) => {\n                        setSummaryData([]);\n                    }\n                )\n        }\n\n\n    };\n\n    return (\n        <>\n            <div>\n                <div className=\"table-control\">\n                    <div className=\"date-picker-container\">\n                        <CustomDatePicker\n                            label=\"Start\"\n                            value={selectedStartDate}\n                            onChange={setSelectedStartDate}\n                            minDate={minStartDate}\n                            placeholder=\"Select start of range\"\n                        />\n                        <CustomDatePicker\n                            label=\"End\"\n                            value={selectedEndDate}\n                            onChange={setSelectedEndDate}\n                            minDate={selectedStartDate ? selectedStartDate : minStartDate}\n                            placeholder=\"Select end of range\"\n                        />\n                    </div>\n\n                    <MembersSuggest onChange={setSearch}/>\n                </div>\n            </div>\n\n            <TableContainer component={Paper}>\n                <Table aria-label=\"contributions\" size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n\n                            </TableCell>\n                            {header.map((cell) => (\n                                <TableCell key={cell.id} align={cell.numeric ? 'right' : 'left'}>\n                                    {cell.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {summaryData\n                            .map((row) => (\n                                <Row row={row} />\n                            ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n}\n\nexport default OrganisedCrimesSummary;","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/contributions/FactionContributionsSummary.js",["62","63"],"import React, {useEffect, useState} from 'react';\nimport {FaSpinner} from 'react-icons/fa';\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport {Paper} from \"@material-ui/core\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport './FactionContributionsSummary.css';\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Box from \"@material-ui/core/Box\";\nimport FactionContributionsGraph from \"./FactionContributionsGraph\";\nimport CustomDatePicker from \"../Datepicker\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nfunction descendingComparator(a, b, orderBy, child) {\n    let x = a[orderBy];\n    let y = b[orderBy];\n\n    if (child !== null) {\n        x = a[orderBy][child];\n        y = b[orderBy][child];\n    }\n\n    x = x != null ? x : -1;\n    y = y != null ? y : -1;\n\n    if (y < x) {\n        return -1;\n    }\n    if (y > x) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy, child) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy, child)\n        : (a, b) => -descendingComparator(a, b, orderBy, child);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst header = [\n    {id: 'name', numeric: false, label: 'User', stat: false},\n    {id: 'gymStrength', numeric: true, label: 'Strength', stat: true},\n    {id: 'gymSpeed', numeric: true, label: 'Speed', stat: true},\n    {id: 'gymDefence', numeric: true, label: 'Defence', stat: true},\n    {id: 'gymDexterity', numeric: true, label: 'Dexterity', stat: true},\n    {id: 'gymTotal', numeric: true, label: 'Total', stat: true},\n    {id: 'lastAction', numeric: false, label: 'Last Action', stat: false}\n];\n\nfunction Row(props) {\n    const {row, selectedStartDate, selectedEndDate} = props;\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <>\n            <TableRow key={row.name} className={row.inFaction? \"\" : \"not-in-faction\"}>\n                <TableCell scope=\"row\" key={row.userId + \"-showmore\"}>\n                    <IconButton aria-label=\"expand row\" size=\"small\"\n                                onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\n                    </IconButton>\n                </TableCell>\n                <TableCell scope=\"row\" key={row.userId}>\n                    {row.name} [<a className=\"player-link\"\n                                   href={\"https://www.torn.com/profiles.php?XID=\" + row.userId}>{row.userId}</a>]\n                </TableCell>\n                <TableCell scope=\"row\" key={row.userId + \"-gymStrength\"}>\n                    {row['gymStrength'].difference}\n                </TableCell>\n                <TableCell scope=\"row\" key={row.userId + \"-gymSpeed\"}>\n                    {row['gymSpeed'].difference}\n                </TableCell>\n                <TableCell scope=\"row\" key={row.userId + \"-gymDefence\"}>\n                    {row['gymDefence'].difference}\n                </TableCell>\n                <TableCell scope=\"row\" key={row.userId + \"-gymDexterity\"}>\n                    {row['gymDexterity'].difference}\n                </TableCell>\n                <TableCell scope=\"row\" key={row.userId + \"-gymTotal\"}>\n                    {row['gymTotal'].difference}\n                </TableCell>\n                <TableCell scope=\"row\" key={row.userId + \"-lastAction\"}>\n                    {row.lastAction ? new Date(row.lastAction).toLocaleString() : ''}\n                </TableCell>\n            </TableRow>\n            {!open ? <></> : (\n                <TableRow className={row.inFaction? \"\" : \"not-in-faction\"}>\n                    <TableCell colSpan=\"8\">\n                        <Collapse in={open} timeout='auto' unmountOnExit>\n                            <Box margin={1}>\n                                <FactionContributionsGraph userId={row.userId} selectedStartDate={selectedStartDate}\n                                                           selectedEndDate={selectedEndDate}/>\n                            </Box>\n                        </Collapse>\n                    </TableCell>\n                </TableRow>\n            )}\n        </>\n    );\n}\n\nfunction FactionContributionsSummary() {\n    const [isLoading, setIsLoading] = useState(true);\n    const [contributors, setContributors] = useState([]);\n    const [times, setTimes] = useState([]);\n    const [selectedStartDate, setSelectedStartDate] = useState(null);\n    const [selectedEndDate, setSelectedEndDate] = useState(null);\n    const [order, setOrder] = useState('desc');\n    const [orderBy, setOrderBy] = useState('gymTotal');\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(25);\n    const [search, setSearch] = React.useState('');\n    const [hideNotInFaction, setHideNotInFaction] = React.useState(true);\n\n    useEffect(() => {\n        fetchTimes();\n    }, []);\n\n    const updateTable = () => {\n        if (selectedEndDate == null || selectedStartDate == null) {\n            return;\n        }\n\n        setIsLoading(true);\n        fetch(`/api/faction/contributions/summary/${selectedStartDate.toISOString().slice(0, 16)}/${selectedEndDate.toISOString().slice(0, 16)}`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoading(false);\n                    setContributors(result);\n                },\n                (error) => {\n                    setIsLoading(false);\n                    setContributors([]);\n                }\n            )\n    };\n\n    const fetchTimes = () => {\n        fetch(\"/api/faction/contributions/intervals\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setTimes(result);\n                    setIsLoading(false);\n                },\n                (error) => {\n                    setTimes([]);\n                    setIsLoading(false);\n                }\n            )\n    };\n\n    const createSortHandler = (property) => (event) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleSearchChange = (event) => {\n        setSearch(event.target.value);\n    };\n\n    const getMinTime = (times) => {\n        return times == null || times.length === 0 ? null : new Date(Math.min.apply(null, times)).setMinutes(0);\n    };\n\n    const getMaxTime = (times) => {\n        let date = times == null || times.length === 0 ? null : new Date(Math.max.apply(null, times));\n        if(date !== null) {\n            date.setMinutes(0);\n            date.setSeconds(0);\n            date.setMilliseconds(0);\n        }\n        return date;\n    };\n\n    useEffect(() => {\n        updateTable();\n    }, [selectedStartDate]);\n\n    useEffect(() => {\n        updateTable();\n    }, [selectedEndDate]);\n\n    const filteredContributors = (contributors) => {\n        return contributors\n            .filter(row => search === \"\" || `${row.name} [${row.userId}]`.toLowerCase().indexOf(search.toLowerCase()) !== -1)\n            .filter(row => !hideNotInFaction || row.inFaction)\n    };\n\n    return (\n        <>\n            <div>\n                <div className=\"table-control\">\n                    <div className=\"date-picker-container\">\n                        <CustomDatePicker\n                            label=\"Start\"\n                            value={selectedStartDate}\n                            onChange={setSelectedStartDate}\n                            minDate={getMinTime(times)}\n                            maxDate={getMaxTime(times\n                                .filter((time) => selectedEndDate == null ? true : selectedEndDate.getTime() > time))}\n                            placeholder=\"Select start of range\"\n                            initialFocusedDate={selectedEndDate ? selectedEndDate : getMinTime(times)}\n                        />\n                        <CustomDatePicker\n                            label=\"End\"\n                            value={selectedEndDate}\n                            onChange={setSelectedEndDate}\n                            minDate={getMinTime(times\n                                .filter((time) => selectedStartDate == null ? true : selectedStartDate.getTime() < time))}\n                            maxDate={getMaxTime(times)}\n                            placeholder=\"Select end of range\"\n                            initialFocusedDate={selectedStartDate ? selectedStartDate : getMaxTime(times)}\n                        />\n                    </div>\n\n\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={hideNotInFaction}\n                                onChange={(event) => setHideNotInFaction(event.target.checked)}\n                                name=\"hide-not-in-faction\"\n                                color=\"inherit\"\n                            />\n                        }\n                        label=\"Hide Ex-members\"\n                    />\n\n                    <TextField id=\"search\" label=\"Search for Member\" variant=\"outlined\" value={search}\n                               onChange={handleSearchChange}/>\n                </div>\n\n                {isLoading ? <FaSpinner icon=\"spinner\" className=\"spinner\"/> : (\n                    <>\n                        <TableContainer component={Paper}>\n                            <Table aria-label=\"contributions\" size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n\n                                        </TableCell>\n                                        {header.map((cell) => (\n                                            <TableCell\n                                                key={cell.id}\n                                                sortDirection={orderBy === cell.id ? order : false}\n                                            >\n                                                <TableSortLabel\n                                                    active={orderBy === cell.id}\n                                                    direction={orderBy === cell.id ? order : 'asc'}\n                                                    onClick={createSortHandler(cell.id)}\n                                                >\n                                                    {cell.label}\n                                                </TableSortLabel>\n                                            </TableCell>\n                                        ))}\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {filteredContributors(stableSort(contributors, getComparator(order, orderBy, header.find(head => head.id === orderBy).stat ? 'difference' : null)))\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                        .map((row) => (\n                                            <Row key={row.userId + \"-row\"} row={row}\n                                                 selectedStartDate={selectedStartDate}\n                                                 selectedEndDate={selectedEndDate}/>\n                                        ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                        <TablePagination\n                            rowsPerPageOptions={[25, 50, 100]}\n                            component=\"div\"\n                            count={filteredContributors(contributors).length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                        />\n                    </>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default FactionContributionsSummary;","/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/contributions/FactionContributionsGraph.js",["64"],"import React, {useEffect, useState} from 'react';\nimport {ChartContainer, ChartRow, Charts, Legend, LineChart, styler, YAxis} from \"react-timeseries-charts\";\nimport {TimeSeries} from 'pondjs';\nimport {FaSpinner} from 'react-icons/fa';\nimport Grid from \"@material-ui/core/Grid\";\n\n\nconst style = styler([\n    {key: \"dexterity\", color: \"#393c5a\", width: 1.5},\n    {key: \"strength\", color: \"#5a1000\", width: 1.5},\n    {key: \"speed\", color: \"#005a06\", width: 1.5},\n    {key: \"defence\", color: \"#585a0a\", width: 1.5},\n    {key: \"total\", color: \"#5a0059\", width: 2},\n]);\n\nfunction buildPoints(data) {\n    let points = [];\n    console.log(data);\n    for (let i = 0; i < data['gymTotal'].length; i++) {\n        points.push([data['gymTotal'][i].time, data['gymTotal'][i]['difference'], data['gymStrength'][i]['difference'],\n            data['gymSpeed'][i]['difference'], data['gymDefence'][i]['difference'], data['gymDexterity'][i]['difference']]);\n    }\n    return points;\n}\n\nfunction buildTimeSeries(data) {\n    return new TimeSeries({\n        name: \"Energy Used in Gym\",\n        columns: [\"time\", \"total\", \"strength\", \"speed\", \"defence\", \"dexterity\"],\n        points: buildPoints(data)\n    })\n}\n\nfunction FactionContributionsGraph(props) {\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState(null);\n    const {userId, selectedStartDate, selectedEndDate} = props;\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    const loadData = () => {\n        setIsLoading(true);\n        fetch(`/api/faction/contributions/user/${userId}/${new Date(selectedStartDate).toISOString().slice(0, 16)}/${new Date(selectedEndDate).toISOString().slice(0, 16)}`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoading(false);\n                    setData(buildTimeSeries(result));\n                },\n                (error) => {\n                    setIsLoading(false);\n                    setData(null);\n                }\n            )\n    };\n\n    return (\n        <>\n            {isLoading || data == null ? <FaSpinner icon=\"spinner\" className=\"spinner\"/> : (\n                <Grid container justify=\"center\">\n                    <Grid item xs={7}>\n                        <ChartContainer\n                            title=\"Energy Spent in Gym Over Time\"\n                            titleStyle={{\n                                fontWeight: 200,\n                                fontSize: 20,\n                                font: '\"Goudy Bookletter 1911\", sans-serif\"',\n                                fill: \"#696969\"\n                            }}\n                            timeRange={data.range()}\n                            timeAxisStyle={{\n                                ticks: {\n                                    stroke: \"#AAA\",\n                                    opacity: 0.25,\n                                    \"stroke-dasharray\": \"1,1\"\n                                },\n                                values: {\n                                    fill: \"#AAA\",\n                                    \"font-size\": 12\n                                }\n                            }}\n                            showGrid\n                            maxTime={data.range().end()}\n                            minTime={data.range().begin()}>\n                            <ChartRow height=\"300\">\n                                <YAxis id=\"axis1\" max={data.max(\"total\")} label=\"Total Energy spent\" width=\"50\"\n                                       type=\"linear\"/>\n                                <Charts>\n                                    <LineChart axis=\"axis1\" series={data}\n                                               columns={[\"total\", \"strength\", \"speed\", \"defence\", \"dexterity\"]}\n                                               style={style}/>\n                                </Charts>\n                            </ChartRow>\n                        </ChartContainer>\n                    </Grid>\n                    <Grid item xs={1}>\n                        <Legend\n                            type=\"line\"\n                            align=\"right\"\n                            stack={true}\n                            style={style}\n                            categories={[\n                                {key: \"total\", label: \"Total\"},\n                                {key: \"strength\", label: \"Strength\"},\n                                {key: \"speed\", label: \"Speed\"},\n                                {key: \"defence\", label: \"Defence\"},\n                                {key: \"dexterity\", label: \"Dexterity\"},\n                            ]}\n                        />\n                    </Grid>\n                </Grid>\n            )}\n        </>\n    );\n}\n\nexport default FactionContributionsGraph;",["65","66"],"/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/organisedcrimes/MembersSuggest.js",[],"/Users/jia/IdeaProjects/Torn/webapp/src/components/faction/organisedcrimes/OrganisedCrimeDrillDown.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":9,"column":12,"nodeType":"73","messageId":"74","endLine":9,"endColumn":18},{"ruleId":"75","severity":1,"message":"76","line":101,"column":8,"nodeType":"77","endLine":101,"endColumn":27,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"76","line":105,"column":8,"nodeType":"77","endLine":105,"endColumn":25,"suggestions":"79"},{"ruleId":"75","severity":1,"message":"76","line":109,"column":8,"nodeType":"77","endLine":109,"endColumn":16,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"81","line":210,"column":8,"nodeType":"77","endLine":210,"endColumn":27,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"81","line":214,"column":8,"nodeType":"77","endLine":214,"endColumn":25,"suggestions":"83"},{"ruleId":"75","severity":1,"message":"84","line":41,"column":8,"nodeType":"77","endLine":41,"endColumn":10,"suggestions":"85"},{"ruleId":"67","replacedBy":"86"},{"ruleId":"69","replacedBy":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'button' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadSummaryData'. Either include it or remove the dependency array.","ArrayExpression",["90"],["91"],["92"],"React Hook useEffect has a missing dependency: 'updateTable'. Either include it or remove the dependency array.",["93"],["94"],"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["95"],["88"],["89"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [loadSummaryData, selectedStartDate]",{"range":"108","text":"109"},"Update the dependencies array to be: [loadSummaryData, selectedEndDate]",{"range":"110","text":"111"},"Update the dependencies array to be: [loadSummaryData, search]",{"range":"112","text":"113"},"Update the dependencies array to be: [selectedStartDate, updateTable]",{"range":"114","text":"115"},"Update the dependencies array to be: [selectedEndDate, updateTable]",{"range":"116","text":"117"},"Update the dependencies array to be: [loadData]",{"range":"118","text":"119"},[4579,4598],"[loadSummaryData, selectedStartDate]",[4658,4675],"[loadSummaryData, selectedEndDate]",[4735,4743],"[loadSummaryData, search]",[7874,7893],"[selectedStartDate, updateTable]",[7949,7966],"[selectedEndDate, updateTable]",[1445,1447],"[loadData]"]